"use client";
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import { JSX, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { GLTF } from "three-stdlib";
import { useMotionValue, useSpring } from "motion/react";

type GLTFResult = GLTF & {
  nodes: {
    ["node-0"]: THREE.Mesh;
  };
  materials: {
    White: THREE.MeshStandardMaterial;
  };
};
type ModelProps = {
  ref?: React.Ref<THREE.Group>;
} & JSX.IntrinsicElements["group"];

export default function Model({ ref, ...props }: ModelProps) {
  const paperPlaneRef = useRef<THREE.Group>(null);

  // Create motion values for both rotation and position
  const rotationX = useMotionValue(Math.PI / 9);
  const positionY = useMotionValue(0);

  // Create springs that will animate smoothly
  const springRotationX = useSpring(rotationX, {
    stiffness: 280,
    damping: 120,
    mass: 1,
  });

  // Configure a bouncier spring for the Y position
  const springPositionY = useSpring(positionY, {
    stiffness: 30,
    damping: 50,
    mass: 3,
  });

  // Use Three.js animation loop to both drive AND apply the animation
  useFrame(({ clock }) => {
    if (paperPlaneRef.current) {
      const time = clock.getElapsedTime();

      // Drive the motion values based on time
      // Using sine waves for smooth oscillation
      const targetRotation =
        Math.PI / 12 + Math.sin(time * 0.5) * (Math.PI / 30);
      const targetPosition = Math.sin(time * 0.8) * 0.15;

      // Set the motion values (which drive the springs)
      rotationX.set(targetRotation);
      positionY.set(targetPosition);

      // Apply the spring-smoothed values to the object
      paperPlaneRef.current.rotation.x = springRotationX.get();
      paperPlaneRef.current.position.y = springPositionY.get();
    }
  });

  // @ts-ignore
  const { nodes, materials } = useGLTF(
    "/three/PaperAirplane.glb",
  ) as GLTFResult;

  return (
    <group ref={paperPlaneRef} {...props} dispose={null}>
      <mesh geometry={nodes["node-0"].geometry} material={materials.White} />
    </group>
  );
}

useGLTF.preload("/three/PaperAirplane.glb");
